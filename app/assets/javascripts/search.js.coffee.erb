# Handles searching for Followers, Following, Entries
# Utilizes elasticsearch on the model/controller side
# as well as AWS, TheMovieDB and the rotten tomatoes API for movies
# not already present in the working database.

# TODO: Handle more error cases in AJAX
# TODO: Try doing some more of this with the helpers from:
#      http://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html#a-simple-example
# TODO: DRY the handlers
# TODO: Be sure the formatting adheres to https://github.com/polarmobile/coffeescript-style-guide
$ ->
  # Presents the loading gif.
  # TODO: Get and style a better loading gif
  loading = (model) ->
    $('.loading-' + model).show()
    $('.pagination').show()

  # Hides the loading gif
  loaded = (model) ->
    $('.pagination').hide()
    $('.loading-' + model).hide()

  # Hits search_controller for the revelvant 'type' i.e. entries or users
  # and begins the process of appending any retrieved data.
  dbSearchThenAppend = (url, list, type) ->
    if ((url isnt 'search/users/') and
        (url isnt '/null')) and
        (url isnt 'search/entries/') and
        (url isnt ('search/entries//no')) and
        (url isnt '/null')
      loading(type)
      $.ajax url,
        type: 'GET',
        error: (jqXHR, textStatus, errorThrown) ->
        success: (data) ->
          console.log(data)
          appendControllerData(data, type, list)

  # Searches by hitting the search_controller to get matching items from the DB.
  searchUsers = (keycode, cssClass) ->
    type = "users"
    searchValue = $(cssClass).children().first().val()
    url = "/search/" + type + "/" + searchValue + "/no"
    if cssClass == '.search-entries' then list = $('#entries-list') else list = $('#users-list')
    entries = list.children()
    entry.remove() for entry in entries
    loaded(type)
    dbSearchThenAppend(url, list, type)

  # Searches entries either by hitting the search_controller to get matching items from the dB
  # or queries Rotten tomatoes on 'Enter'.
  searchEntries = (keycode) ->
    type = "entries"
    searchValue = $('.search-entries').children().first().val()
    url = "/search/" + type + "/" + searchValue + "/no"
    list = $('#entries-list')
    entries = list.children()
    entry.remove() for entry in entries
    loaded(type)
    if keycode is 13 and type is 'entries' #keycode 13 is 'enter', in this case we query Rotten Tomatoes
      event.preventDefault()
      loading(type)
      pageLimit = "&page_limit=5"
      if window.location.pathname is '/search' then pageLimit = "&page_limit=10"
      url = "http://api.rottentomatoes.com/api/public/v1.0/movies.json?apikey=<%= ENV['ROTTEN_TOMATOES_KEY'] %>&q="
      url += encodeURI(searchValue)
      url += pageLimit
      url += "&callback=appendRequestData"
      $.ajax url,
        type: 'GET',
        crossDomain: true,
        dataType: 'jsonp',
        jsonpCallback: 'appendRequestData',
        error: ( jqXHR, textStatus, errorThrown ) ->
          alert "AJAX Error: #{textStatus}"
    else #Otherwise we simply hit search_controller for our own values
      dbSearchThenAppend(url, list, type)

  # Returns an HTML string to append user wells to a list
  # TODO: Could DRY this up by passing in 'zap' or 'follow'
  buildUserHTML = (amazonPath, user_id, name, followers) ->
    # if window.location.pathname == '/search' then user_id = "/users/" + user_id
    isZap = false
    if $('.zap').length > 0 then isZap = true
    html = "<li class='new_well'>"
    html += "<a href='" + user_id + "'><img src='" + amazonPath + "' class='img-circle'></a>"
    html += "<span>" + name.substring(0,30) + "</span>"
    if followers
      zap = "<button class='btn btn-success'><class='zap" + user_id
      zap += "' id='" + user_id + "' href='/#'>Zap</a></button></li>"
      html += zap
    else
      if isZap
        add = "<button class='btn btn-success'><a class='add" + user_id
        add += "' id='" + user_id + "' href='/#'>zap</a></button></li>"
      else
        add = "<button class='btn btn-success'><a class='add" + user_id
        add += "' id='" + user_id + "' href='#/'>follow</a></button></li>"
      html += add
    return html

  # Returns an HTML string that will send a request to the controller
  # to add a new entry using requestData once clicked.
  # TODO: Repeat code here and buildAttachedHTML: refactor
  buildRequestHTML = (requestData, picture, title, rt_id) ->
    suggestion = false
    if $('.suggest').length > 0 then suggestion = true
    html = "<li class='new_well '>"
    html += "<a href='#' class='unbuilt" + rt_id + "' id='"
    html += requestData + "'><img src='" + picture + "' class='img-circle'></a>"
    html += "<span>" + title.substring(0,30) + "</span>"
    if suggestion
      add = "<button class='btn btn-success '><a class='suggest add" + rt_id
      add += "'  id='" + requestData + "' href='#/'>suggest</a></button></li>"
    else
      add = "<button class='btn btn-success'><a class='add" + rt_id
      add += "'  id='"+ requestData + "' href='#'>add</a></button></li>"
    html += add
    return html

  # Returns an HTML string for an existing entry, as opposed to one
  # that might need added to the database.
  buildAttachedHTML = (picture, title, id) ->
    html = "<li class='new_well '>"
    html += "<a href='/entries/" + id + "'><img src='" + picture + "' class='img-circle'></a>"
    html += "<span>" + title.substring(0,30) + "</span>"
    suggestion = false
    if $('.suggest').length > 0 then suggestion = true
    if suggestion
      add = "<button class='btn btn-success add" + id + "'><a class='suggest"
      add += "'  id='" + id + "' href='#/'>suggest</a></button></li>"
    else
      add = "<button class='btn btn-success add" + id + "'><a class='add"
      add += "'  id='"+ id + "' href='#'>add</a></button></li>"
    html += add
    return html

  # Adds a users HTML to a list of followers with the option to follow/unfollow them.
  appendUserHTML = (data) ->
    amazonPath = "http://s3.amazonaws.com/zappcord/users/avatars/000/000/"
    #TODO: logic for amazons file path here, once there are too many users just appending '00' won't work
    #TODO: Should probably DRY amazonPath because it's used twice, will do w/ logic above
    amazonPath = amazonPath + "00" + data['id'] + "/thumb/" + data['avatar_file_name']
    html = "<li class='new_well '>"
    html += "<a href='" + data['id'] + "'><img src='" + amazonPath + "' class='img-circle'></a>"
    html += data['name'].substring(0,30)
    add = "<button class='btn btn-warning right'><a class='unfollow" + data['id']
    add += "'  id='"+ data['id'] + "' href='#'>unfollow</a></button></li>"
    html += add
    html = $(html)
    $('.following').prepend(html)
    unfollow = $('.unfollow' + data['id'])
    unfollow.click(() ->
      $.ajax "unfollow/" + data['id'],
        type: "GET",
        success: ( data ) ->
          html.hide())

  # Creates and adds an entries HTML to the backlog list once if a new entry from
  # search is clicked.
  appendEntryHTML = (data) ->
    if data['thumbnail_file_name'] isnt null
      photo = data['thumbnail_file_name']
    else
      photo = '/assets/thumb/missing.png'
    title = data['title']
    if title.length >= 30
      title = title.substring(0,30) + "..."
    html = "<li class='new_well '><a href='/entries/" + data['id']
    html += "'><img alt='Missing' src='" + photo + "' class='img-circle''>"
    html += "</a>" + title + "<a class='deleteEntry' id='deleteTmp"
    html += data['id'] + "' data-method='delete' data-remote='true' href='/entries/"
    html += data['id'] + "' rel='nofollow'>"
    html += "<i class='fa fa-trash-o fa-2x'></i></a>"
    html = $(html)
    $('.backlog').prepend(html)
    del = $('#deleteTmp' + data['id'])
    del.click(() ->
      html.hide())

  # Event handler for suggesting an entry for a zap.
  suggestHandler = (event) ->
    event.preventDefault()
    title = $(this).parent().children()[1].innerHTML
    $('#zap_title').val(title)
    $('#entry_id').val($(this).children()[0].id)

  # Event handler for adding an entry to your backlog and calls reindex the searched item type.
  addHandler = (event) ->
    event.preventDefault()
    url = '/entries/add/' + this.childNodes[0].id
    $.get(url, {id: this.id, append: true}).done ( data ) ->
      appendEntryHTML(data)
    $.get('/search/reindex')

  # Event handler for appending a new entry to the backlog list
  # from the appended search list.
  buildHandler = (event) ->
    suggestion = false
    if $('.suggest').length > 0 then suggestion = true
    event.preventDefault()
    loading("entry")
    values = this.id.split("~~")
    clickedElement = this
    if values[2] is undefined then values[2] = ""
    if values[1] is "" then values[1] = "No description"
    url = "/backlog/unbuilt/"
    $.get(url,  {movie_info: values}).done (data) ->
      title = $(clickedElement).parent().parent().children()[1].innerHTML
      $('#zap_title').val(title)
      loaded('entries')
      if suggestion
        $('#entry_id').val(data['id'])
      #TODO: Make the class unbuilt more descriptive
      if clickedElement.className.substring(0,7) is 'unbuilt'
        window.location.replace("/entries/" + data['id'])
      else if clickedElement.className.substring(0,3) is 'add'
        #create a request to add it to the backlog
        url = '/entries/add/' + data['id']
        $.get(url, { id: data['id'], append: true } ).done ( data ) ->
          $.get('/search/reindex')
          #append it on success
          unless suggestion then appendEntryHTML(data)

  zapHandler = (event) ->
    event.preventDefault()
    title = $(this).parent().parent().children()[1].innerHTML
    $('#zap_username').val(title)
    $('#receiver_id').val($(this).attr('id'))

  # Event handler for following a new user that has been appended.
  followHandler = (event) ->
    event.preventDefault()
    url = '/users/follow/' + this.id
    $.get(url, { id: this.id }).done ( data ) ->
      appendUserHTML(data)

  # Appends user HTML to a list of users to following, potentially "zap".
  appendUsers = (data, list, followers) ->
    console.log("appendUsers")
    max = 5
    for k,v of data
      amazonPath = "http://s3.amazonaws.com/zappcord/users/avatars/000/000/"
      #TODO: logic for amazons file path here, once there are too many users just appending '00' won't work
      amazonPath = amazonPath + "00" + v['id'] + "/thumb/" + v['avatar_file_name']
      if (v['name'] is "" or v['name'] is undefined) then name = v['nickname']
      if followers
        html = buildUserHTML(amazonPath, v['id'], name, true)
        list.append(html)
        add = $('.zapp' + v['id'])
        add.click(zapHandler)
      else
        html = buildUserHTML(amazonPath, v['id'], name, false)
        list.append(html)
        add = $('.add' + v['id'])
        if $('.zap').length > 0
          add.click(zapHandler)
        else
          add.click(followHandler)

  # Appends existing entries from the controller to a list.
  appendControllerData = (data, type, list) ->
    loaded(type)
    max = 5
    if type is 'entries'
      for k,v of data
        if max > 0
          picture = v['thumbnail_file_name']
          if picture is null then picture = ""
          html = buildAttachedHTML(picture, v['title'], v['id'])
          html = $(html)
          list.append(html)
          if $('.suggest').length > 0
            suggestAnchor = $(".add" + v['id'])
            suggestAnchor.click(suggestHandler)
          else
            addAnchor = $(".add" + v['id'])
            addAnchor.click(addHandler)
          max--
    else if type is 'followers'
      appendUsers(data, list, true)
    else
      appendUsers(data, list, false)

  # Appends the data from a request to Rotten Tomatoes.
  # TODO: Is 'window' neccessary?
  window.appendRequestData = (data) ->
    loaded('entries')
    list = $('#entries-list') #TODO: find a way to pass this to the callback
    for movie in data["movies"]
      alternate = movie['alternate_ids']
      if alternate isnt undefined then imdb = alternate['imdb'] else imdb = "unknown"
      requestData = movie['title'] + "~~" + movie['synopsis'].replace(/'/g, "")
      requestData += "~~" + imdb + "~~" + movie['posters']['detailed']
      html = buildRequestHTML(requestData, movie["posters"]["detailed"], movie['title'], movie['id'])
      list.append(html)
      show = $('.unbuilt' + movie['id'])
      add = $(".add"+ movie['id'])
      show.click(buildHandler)
      add.click(buildHandler)

  # On click for "More results"
  $('.depth').on 'click', (event) ->
    if $('.loading-entries').length > 0
      loading('entries')
    else
      loading('users')
    this.parent().hide()

  # Keypress event for searching for users to follow
  $('.search-users').on 'keypress', (event) ->
    keycode = event.keyCode
    searchUsers(keycode, '.search-users')

  # Keypress event for searching for entries
  $('.search-entries').on 'keypress', ( event ) ->
    keycode = event.keyCode
    pathName = window.location.pathname
    if pathName is "/search"
      type = $('input:checked').val()
      if type is "entries"
        searchEntries(keycode)
      else
        searchUsers(keycode, ".search-entries")
    else
      searchEntries(keycode)
